apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-kapt'

android {
    signingConfigs {
        config {
            final def keystoreFile = file(System.getenv("SPACE_APP_KEYSTORE_PATH"))
            if (keystoreFile.exists()) {
                storeFile keystoreFile
                storePassword System.getenv("SPACE_APP_KEYSTORE_PASSWORD")
                keyAlias "StarlinerKey"
                keyPassword System.getenv("SPACE_APP_KEY_PASSWORD")
            } else {
                println "couldn't find keystore file: " + keystoreFile.path
            }
        }
    }
    compileSdkVersion buildConfig.compileSdk
    defaultConfig {
        applicationId "sk.kasper.space"
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode 18
        versionName "1.2.5"
        testInstrumentationRunner "sk.kasper.space.MockAndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField 'long', 'SYNC_INTERVAL_HOURS', '4'
        buildConfigField 'long', 'TOO_OLD_LAUNCH_TO_BE_SHOWN_HOURS', '24'
        buildConfigField 'String', 'API_KEY', "\"${System.getenv("SPACE_APP_API_KEY")}\""
        buildConfigField 'boolean', 'USE_FAKE_RESPONSE_API', "$use_fake_reponse_api"

        manifestPlaceholders += [
                google_maps_key: "${System.getenv("SPACE_APP_GOOGLE_MAPS_KEY")}",
        ]
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            manifestPlaceholders += [usesCleartextTraffic: "false"]
        }
        debug {
            manifestPlaceholders += [usesCleartextTraffic: "true"]
        }
    }
    buildFeatures {
        dataBinding = true
        compose true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.0.0-beta01'
    }
    testOptions {
        unitTests.returnDefaultValues = true

        // Always show the result of every unit test, even if it passes.
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }

        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }
}

androidExtensions {
    features = ["parcelize"]
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation(libs.androidx.test.espresso.core)
    implementation libs.androidx.legacy.support
    implementation libs.androidx.appcompat
    implementation libs.android.material
    implementation libs.androidx.preference
    implementation libs.androidx.vectordrawable
    implementation libs.androidx.cardview
    implementation libs.androidx.drawerlayout
    implementation libs.androidx.constraintlayout
    implementation libs.android.play.services.maps
    implementation libs.kotlin.stdlib.jdk7
    implementation libs.androidx.lifecycle.runtime
    implementation libs.androidx.lifecycle.extensions
    implementation libs.androidx.lifecycle.viewmodel
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.room.runtime
    kapt libs.androidx.room.compiler
    implementation libs.androidx.room.ktx
    implementation libs.androidx.core

    implementation libs.androidx.compose.ui.ui
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation libs.androidx.compose.foundation
    implementation libs.androidx.compose.ui.tooling
    // Material Design
    implementation libs.androidx.compose.material.material
    // Material design icons
    implementation libs.androidx.compose.material.icons.core
    implementation libs.androidx.compose.material.icons.extended

    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui
    implementation libs.android.flexbox
    implementation libs.androidx.work.runtime

    implementation libs.dagger.support
    kapt libs.dagger.compiler
    kaptAndroidTest libs.dagger.compiler
    kapt libs.dagger.android.processor
    kaptAndroidTest libs.dagger.android.processor
    compileOnly libs.dagger.assisted.inject.annotations
    kapt libs.dagger.assisted.inject.processor

    implementation libs.retrofit.retrofit
    implementation libs.retrofit.converter.gson
    implementation libs.okhttp.logging
    implementation libs.okhttp.okhttp
    implementation libs.timber
    implementation libs.threetenabp.threetenabp
    testImplementation libs.threetenabp.test
    implementation libs.picasso
    implementation libs.androidx.recyclerview
    implementation libs.photoview
    implementation libs.firebase.crashlytics

    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics

    implementation libs.kotlin.coroutines.core
    implementation libs.kotlin.coroutines.android
    implementation libs.kotlin.coroutines.test

    testImplementation libs.androidx.coretesting
    testImplementation libs.mockito.kotlin
    testImplementation libs.junit
    androidTestUtil libs.androidx.test.orchestrator
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.espresso.contrib

    implementation project(':domain')
    implementation project(':ui-common')
    implementation project(':ui-settings')
    implementation project(':ui-timeline')
}

apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'
